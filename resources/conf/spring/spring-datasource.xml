<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        ">
	
	<!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:conf/jdbc/mysql.properties" />
    
	<!-- app数据库 -->
	<bean id="storeDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.pass}"></property>

		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<!-- 初始化时建立物理连接的个数，缺省值为0 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 最大连接池数量，缺省值为8 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat,wall,log4j" />
		<!-- 如果配置了proxyFilters，此配置可以不配置 druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句 
			druid.stat.slowSqlMillis=10000 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢 <property 
			name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10000" 
			/> -->
		<!-- 监控统计拦截的filters -->
		<!-- 并在filters属性中配置了log4j -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">  
        <property name="mergeSql" value="true" />  
        <property name="slowSqlMillis" value="10000" />  
        <property name="logSlowSql" value="true" />  
    </bean>  
      
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">  
        <!-- <property name="resultSetLogEnabled" value="false" /> -->  
        <!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->  
    </bean>  
      
    <!-- 配置druid监控spring jdbc -->  
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />  
   
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">  
        <property name="patterns">  
            <list>  
                <value>com.leting.*.service.*</value>  
                <value>com.leting.*.dao.*</value>  
                <value>com.third.yingmi.*.service.*</value>  
                <value>com.third.yingmi.*.dao.*</value>  
            </list>  
        </property>  
    </bean>  
      
    <aop:config proxy-target-class="true">  
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />  
    </aop:config>  
    
	<!-- 动态数据库 -->
	<bean id="dynamicDataSource" class="com.leting.util.datasource.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map key-type="com.leting.util.datasource.DatabaseType">
				<entry key="STORE" value-ref="storeDataSource"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="storeDataSource">
		</property>
	</bean>

	<!-- 配置sqlSessionFactory: spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="configLocation" value="classpath:conf/mybatis/mybatis-config.xml" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:conf/mybatis/mapping/*.xml" />
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.leting.*.dao,com.third.yingmi.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
</beans>